@using CsvHelper.Configuration
@using CustomersTable.Data
@inherits LayoutComponentBase
@inject IJSRuntime JS
@using CsvHelper
@using System.Globalization
@using CustomersTable.Data.Interfaces
@inject ICustomerManagementService service

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider 
    FullWidth="true"
    MaxWidth="MaxWidth.Medium"
    />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudText Typo="Typo.h5" Class="ml-3">Customer table</MudText>
        <MudSpacer />
        <input type="file" @onchange="OnFileSelected" style="display:none" />
        <MudIconButton Icon="@(UploadCustomerListButtonIcon)" Disabled="@index.isEditing" Color="Color.Inherit" OnClick="OpenFileDialog">Upload Customers</MudIconButton>
        <MudIconButton Icon="@(DownloadCustomerListButtonIcon)" Disabled="@index.isEditing" Color="Color.Inherit" OnClick="@DownloadCustomerList"></MudIconButton>
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
    </MudAppBar>
    
    <MudMainContent Class="mt-16 pa-4">
        <Index @ref="index"/>
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {

    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;

    private CustomersTable.Components.Pages.Index index = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
    }


    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private void DownloadCustomerList()
    {
        index.DownloadCustomerList();
    }

    private async Task OpenFileDialog()
    {
        await JS.InvokeVoidAsync("document.querySelector('input[type=file]').click()");
    }

    private async Task OnFileSelected(ChangeEventArgs e)
    {
        var file = e.Value as IBrowserFile;
        if (file != null)
        {
            using (var stream = file.OpenReadStream())
            using (var reader = new StreamReader(stream))
            {
                var csv = new CsvReader(reader, new CsvConfiguration(CultureInfo.InvariantCulture));

                var records = csv.GetRecords<Customer>().ToList();

                await service.SaveChangesAsync(customers: records, customersToDelete: null);

                await JS.InvokeVoidAsync("reloadPage");

            }
        }
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.DarkMode,
        false => Icons.Material.Outlined.LightMode,
    };

    public string DownloadCustomerListButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.Download,
        false => Icons.Material.Outlined.Download,
    };

    public string UploadCustomerListButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.Upload,

        false => Icons.Material.Outlined.Upload,

    };
}

<script>
    function reloadPage() {
        location.reload();
    }
</script>
