@using CsvHelper.Configuration
@using CustomersTable.Data
@inherits LayoutComponentBase
@inject IJSRuntime JS
@using CsvHelper
@using System.Globalization
@using CustomersTable.Data.Interfaces
@inject ICustomerManagementService service
@inject NavigationManager NavigationManager
@inject IUserService userService
@inject ISnackbar Snackbar
@inject IComponentCommunicationService Link
@inject ICsvService CsvService

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider 
    FullWidth="true"
    MaxWidth="MaxWidth.Medium"
    />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudText Typo="Typo.h5" Class="ml-3">Customer table</MudText>
        <MudSpacer />
        <InputFile OnChange="OnFileSelected" style="display:none" />
        <div class="d-flex">
            <MudTooltip Text="Account" Disabled="isAccountPopupOpen">
                <MudIconButton Style="@(_isLoggedIn ? "" : "display:none")" Icon="@(AccountButtonIcon)" Color="Color.Inherit" OnClick="@ToggleAccountPopup" />
            </MudTooltip>
            <MudPopover  OverflowBehavior="OverflowBehavior.FlipNever" Open="@isAccountPopupOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter" Class="pa-4">
                <MudButton Class="ma-3" Variant="Variant.Filled" Color="Color.Info" OnClick="ToLoginPage">Relogin</MudButton>
            </MudPopover>
            
        </div>
        <MudTooltip Text="Add customers from csv">
            <MudIconButton @ref="uploadCustomersButton" Style="@(_isLoggedIn ? "" : "display:none")" Icon="@(UploadCustomerListButtonIcon)" Disabled="@_isEditing" Color="Color.Inherit" OnClick="OpenFileDialog">Upload Customers</MudIconButton>
        </MudTooltip>
        <MudTooltip Text="Download customers csv">
            <MudIconButton Style="@(_isLoggedIn ? "" : "display:none")" Icon="@(DownloadCustomerListButtonIcon)" Disabled="@_isEditing" Color="Color.Inherit" OnClick="@DownloadCustomerList"></MudIconButton>
        </MudTooltip>
        <MudTooltip Text="@(_isDarkMode ? "Switch to light mode" : "Switch to dark mode")">
            <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
        </MudTooltip>
    </MudAppBar>
    
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _isLoggedIn;
    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;
    private bool isAccountPopupOpen;
    private bool _isEditing;
    private MudIconButton uploadCustomersButton = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new()
        {
            PaletteLight = _lightPalette,
            PaletteDark = _darkPalette,
            LayoutProperties = new LayoutProperties()
        };
        Link.IsEditingChanged += async (e) => await HandleIsEditingChanged(e);
        userService.OnIsLoggenInChanged += HandleIsLoggenInChanged;
    }

    private async Task HandleIsEditingChanged(bool isEditing)
    {
        _isEditing = isEditing;
        await InvokeAsync(StateHasChanged);
    }

    private void HandleIsLoggenInChanged(object? sender, EventArgs e)
    {
        _isLoggedIn = userService.IsLoggenIn;
        if(_isLoggedIn)
        {
            _isDarkMode = userService.isLightMode;
        }
        StateHasChanged();
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
        await userService.SetLightModeAsync(_isDarkMode);
    }

    private void DownloadCustomerList()
    {
        Link.TriggerDownload();
    }

    private async Task OpenFileDialog()
    {
        Link.TriggerBusy(true);

        try
        {
            var task = JS.InvokeVoidAsync("triggerFileInputClick");
            Snackbar.Add("Processing file, please wait...", Severity.Info);
            await task;
        }
        catch(Exception ex)
        {
            Link.TriggerError(ex.Message);
            Console.WriteLine($"File dialog error {ex.Message}");
        }
        finally
        {
            Link.TriggerBusy(false);
        }
    }

    private void ToggleAccountPopup() => isAccountPopupOpen = !isAccountPopupOpen;

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        Link.TriggerBusy(true);
        try
        {
            var records = await CsvService.GetCustomersFromCsv(e);
            await service.SaveChangesAsync(customers: records, customersToDelete: null);
            //await Task.Delay(500);
            Link.TriggerReresh();
                    
        }
        catch (Exception ex)
        {
            Link.TriggerError($"Error processing CSV file: {ex.Message}");
        }
        finally
        {
            Link.TriggerBusy(false);
        }
    }

    private void ToLoginPage()
    {
        userService.IsLoggenIn = false;
        ToggleAccountPopup();
        NavigationManager.NavigateTo("/login");
    }

    private readonly PaletteLight _lightPalette = new()
    {
        Black = "#110e2d",
        AppbarText = "#424242",
        AppbarBackground = "rgba(255,255,255,0.8)",
        DrawerBackground = "#ffffff",
        GrayLight = "#e8e8e8",
        GrayLighter = "#f9f9f9",
    };

    private readonly PaletteDark _darkPalette = new()
    {
        Primary = "#7e6fff",
        Surface = "#1e1e2d",
        Background = "#1a1a27",
        BackgroundGray = "#151521",
        AppbarText = "#92929f",
        AppbarBackground = "rgba(26,26,39,0.8)",
        DrawerBackground = "#1a1a27",
        ActionDefault = "#74718e",
        ActionDisabled = "#9999994d",
        ActionDisabledBackground = "#605f6d4d",
        TextPrimary = "#b2b0bf",
        TextSecondary = "#92929f",
        TextDisabled = "#ffffff33",
        DrawerIcon = "#92929f",
        DrawerText = "#92929f",
        GrayLight = "#2a2833",
        GrayLighter = "#1e1e2d",
        Info = "#4a86ff",
        Success = "#3dcb6c",
        Warning = "#ffb545",
        Error = "#ff3f5f",
        LinesDefault = "#33323e",
        TableLines = "#33323e",
        Divider = "#292838",
        OverlayLight = "#1e1e2d80",
    };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.DarkMode,
        false => Icons.Material.Outlined.LightMode,
    };

    public string DownloadCustomerListButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.Download,
        false => Icons.Material.Outlined.Download,
    };

    public string UploadCustomerListButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.Upload,

        false => Icons.Material.Outlined.Upload,

    };

    public string AccountButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AccountCircle,
        false => Icons.Material.Outlined.AccountCircle,
    };
}

<script>
    function reloadPage() {
        location.reload();
    }
</script>
<script>
    function triggerFileInputClick() {
        const fileInput = document.querySelector('input[type=file]');
        if (fileInput) {
            fileInput.click();
        } else {
            console.error("File input element not found.");
        }
    }
</script>