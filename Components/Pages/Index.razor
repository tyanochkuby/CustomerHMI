@page "/"

@using CustomersTable.Data
@using CustomersTable.Data.Attributes
@using CustomersTable.Data.Interfaces
@using CustomersTable.Components
@using CustomersTable.Services
@using System.Reflection
@using System.Text
@inject IDialogService DialogService
@inject ICustomerService service
@inject ICustomerManagementService customerManagementService
@inject ICustomerDialogService customerDialogService
@inject IJSRuntime JS

<PageTitle>Customers</PageTitle>
@if (busy)
{
    <div class="alert alert-info">
        Loading...
    </div>
}
else
{
    <MudPaper>
        <MudTable Hover="true" T="Customer" Items="customerList" Filter="new Func<Customer,bool>(FilterFunc)">
            <ToolBarContent>
                   
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                <MudSpacer />
                <MudButton Class="mt-3 mr-2" Variant="Variant.Filled" Disabled="@(!isFormValid)" Color="Color.Primary" OnClick="ToggleEditMode">
                    @(isEditing ? "Save" : "Edit")
                </MudButton>

                @if (isEditing)
                {
                    <MudButton Class="mt-3 ml-2 mr-2" Variant="Variant.Filled" Color="Color.Error" Disabled="@(!customerList.Any(c => c.Checked))" @onclick="DeleteSelected">Delete</MudButton>
                    <MudButton Class="mt-3 ml-2 mr-2" Variant="Variant.Filled" Color="Color.Secondary" @onclick="CancelChanges">Cancel</MudButton>
                }
            </ToolBarContent>
            <HeaderContent>
                <MudTr Style="display: flex;">
                    <MudTh Style=" flex-grow: 1; flex-basis: 56px;"></MudTh>

                    <MudTh Style=" flex-grow: 1; flex-basis: 150px;"><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.FirstName)">Name</MudTableSortLabel></MudTh>
                    <MudTh Style=" flex-grow: 1; flex-basis: 150px;"><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.LastName)">Last name</MudTableSortLabel></MudTh>
                    <MudTh Style=" flex-grow: 1; flex-basis: 250px;">Street</MudTh>
                    <MudTh Style=" flex-grow: 1; flex-basis: 50px;">House #</MudTh>
                    <MudTh Style=" flex-grow: 1; flex-basis: 50px;">Appartment</MudTh>
                    <MudTh Style=" flex-grow: 1; flex-basis: 100px;">Postal code</MudTh>
                    <MudTh Style=" flex-grow: 1; flex-basis: 150px;"><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.Town)">Town</MudTableSortLabel></MudTh>
                    <MudTh Style=" flex-grow: 1; flex-basis: 150px;">Phone number</MudTh>
                    <MudTh Style=" flex-grow: 1; flex-basis: 100px;"><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.BirthDate)">Date of birth</MudTableSortLabel></MudTh>
                    <MudTh Style=" flex-grow: 1; flex-basis: 50px;"><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.Age)">Age</MudTableSortLabel></MudTh>
                    <MudTh Style=" flex-grow: 1; flex-basis: 80px;"></MudTh>
                </MudTr>
            </HeaderContent>
            <RowTemplate>
                    
                <MudTr Style="display: flex;">
                    <MudTd Style="height: 70px; flex-grow: 1; flex-basis: 56px;" DataLabel="Enabled"><MudCheckBox Class="@(isEditing ? "visible" : "invisible")" T="bool" @bind-Value="@context.Checked"></MudCheckBox></MudTd>

                    <EditableField T="string" flexBasis="150"   Value="@context.FirstName"          ValidationAttribute="@(new PolishAlphabetAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => context.FirstName = newValue)" OnValidationChanged="UpdateValidationState" />
                    <EditableField T="string" flexBasis="150"   Value="@context.LastName"           ValidationAttribute="@(new PolishAlphabetAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => context.LastName = newValue)" OnValidationChanged="UpdateValidationState" />
                    <EditableField T="string" flexBasis="250"   Value="@context.StreetName"         ValidationAttribute="@(new PolishAlphanumericAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => context.StreetName = newValue)" OnValidationChanged="UpdateValidationState" />
                    <EditableField T="string" flexBasis="50"    Value="@context.HouseNumber"        ValidationAttribute="@(new HouseNumberAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => context.HouseNumber = newValue)" OnValidationChanged="UpdateValidationState" />
                    <EditableField T="string" flexBasis="50"    Value="@context.AppartmentNumber"   ValidationAttribute="@(new AppartmentNumberAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => context.AppartmentNumber = newValue)" OnValidationChanged="UpdateValidationState" />
                    <EditableField T="string" flexBasis="100"   Value="@context.PostalCode"         ValidationAttribute="@(new PostalCodeAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => context.PostalCode = newValue)" OnValidationChanged="UpdateValidationState" />
                    <EditableField T="string" flexBasis="150"   Value="@context.Town"               ValidationAttribute="@(new PolishAlphabetAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => context.Town = newValue)" OnValidationChanged="UpdateValidationState" />
                    <EditableField T="string" flexBasis="150"   Value="@context.PhoneNumber"        ValidationAttribute="@(new PhoneNumberAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => context.PhoneNumber = newValue)" OnValidationChanged="UpdateValidationState" />
                    <EditableField T="DateTime" flexBasis="100" Value="@context.BirthDate" IsEditing="isEditing" ValueChanged="@(newValue => { context.BirthDate = newValue; context.Age = Customer.CalculateAge(newValue);})" OnValidationChanged="UpdateValidationState" />
                    <EditableField T="int" flexBasis="50" Value="@context.Age" IsEditing="isEditing" IsDisabled="true" ValueChanged="@(newValue => context.Age = newValue)" OnValidationChanged="UpdateValidationState" />
                    <MudTd Style="height: 70px; padding-top: 5px; flex-grow: 1; flex-basis: 80px;" DataLabel="Enabled"> <a href="tel:+48 @context.PhoneNumber"><MudIconButton Class="@(isEditing ? "invisible" : "visible")" Icon="@TelephoneIcon"></MudIconButton> </a></MudTd>
                </MudTr>
            </RowTemplate>
        </MudTable>
        @if (isEditing)
        {
            <MudButton Class="mx-auto" Style="width: 100%" Color="Color.Primary" @onclick="OpenCreateCustomerDialog">New</MudButton>
        }
    </MudPaper>
}

@code {
    [Parameter] public bool _isDarkMode { get; set; }
    private bool busy;
    private bool isFormValid = true;
    public bool isEditing
    {
        get;
        private set;
    }
    private List<Customer> customerList = new();
    private List<Customer> newCustomers = new();
    private List<int> customersToDelete = new();
    private List<Customer> originalCustomerList = new();
    string searchString = string.Empty;

    public string TelephoneIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.Phone,
        false => Icons.Material.Outlined.Phone,
    };

    protected override async Task OnInitializedAsync()
    {
        await RefreshAsync();
    }

    private async Task RefreshAsync()
    {
        busy = true;
        customerList = (await customerManagementService.GetCustomersAsync()).ToList();
        newCustomers.Clear();
        originalCustomerList = customerList.Select(c => c.Clone()).ToList();
        busy = false;
    }

    private async Task ToggleEditMode()
    {
        if (isEditing)
        {
            await customerManagementService.SaveChangesAsync(customerList, customersToDelete, newCustomers);
            isEditing = false;
            await RefreshAsync();
        }
        else
        {
            isEditing = true;
        }
    }

    private void CancelChanges()
    {
        customersToDelete.Clear();
        newCustomers.Clear();
        customerList = originalCustomerList.Select(c => c.Clone()).ToList();
        isEditing = false;
    }

    private void DeleteSelected()
    {
        customersToDelete.AddRange(customerList.Where(c => c.Checked).Select(c => c.Id));
        customerList = customerList.Where(c => !c.Checked).ToList();
    }

    private async Task OpenCreateCustomerDialog()
    {
        var newCustomer = await customerDialogService.OpenCreateCustomerDialogAsync();
        if (newCustomer != null)
        {
            newCustomers.Add(newCustomer);
            customerList.Add(newCustomer);
        }
    }

    private bool FilterFunc(Customer customer)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (customer.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (customer.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{customer.Town} {customer.StreetName}".Contains(searchString))
            return true;
        return false;
    }
    private void UpdateValidationState(bool isValid)
    {
        isFormValid = customerList.All(c => c.IsValid);
    }

    public void DownloadCustomerList()
    {
        var csvBuilder = new StringBuilder();
        csvBuilder.AppendLine("First Name, Last Name, Street Name, House Number, Apartment Number, Postal Code, Town, Phone Number, Date of Birth, Age");

        foreach (var customer in customerList)
        {
            csvBuilder.AppendLine($"{customer.FirstName}, {customer.LastName}, {customer.StreetName}, {customer.HouseNumber}, {customer.AppartmentNumber}, {customer.PostalCode}, {customer.Town}, {customer.PhoneNumber}, {customer.BirthDate.ToShortDateString()}, {customer.Age}");
        }
        var csvData = csvBuilder.ToString();
        JS.InvokeVoidAsync("downloadFileFromStream", "customers.csv", csvData);
    }
}

<script>
    function downloadFileFromStream(fileName, content) {
        console.log(content);
        const file = new Blob([content], { type: 'text/csv' });
        const downloadLink = document.createElement('a');
        downloadLink.href = URL.createObjectURL(file);
        downloadLink.download = fileName;
        downloadLink.click();
        URL.revokeObjectURL(downloadLink.href);
    }
</script>