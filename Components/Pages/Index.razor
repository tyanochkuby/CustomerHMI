@page "/"

@using CustomersTable.Data
@using CustomersTable.Data.Attributes
@using CustomersTable.Data.Interfaces
@using CustomersTable.Components
@using CustomersTable.Services
@using System.Reflection
@using System.Text
@inject IDialogService DialogService
@inject ICustomerService service
@inject ICustomerManagementService customerManagementService
@inject ICustomerDialogService customerDialogService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IUserService userService
@inject ISnackbar Snackbar
@inject IComponentCommunicationService Link

<PageTitle>Customers</PageTitle>

<MudPaper>
    <MudTable Loading="busy" MultiSelection="isEditing" SelectOnRowClick="false" @bind-SelectedItems="selectedCustomers" LoadingProgressColor="Color.Info" Breakpoint="Breakpoint.Sm" Hover="true" T="Customer" Items="customerList" Filter="new Func<Customer,bool>(FilterFunc)">
        <ToolBarContent>
                   
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            <MudSpacer />
            @if(!isEditing)
            {
                <MudButton Class="mt-3 mr-2" Variant="Variant.Filled" Color="Color.Primary" OnClick="ToggleEditMode">Edit</MudButton>
            }
            else
            {
                <MudButton Class="mt-3 mr-2" Variant="Variant.Filled" Disabled="@(!isFormValid || !wasChanged)" Color="Color.Primary" OnClick="ToggleEditMode">Save</MudButton>
                <MudButton Class="mt-3 ml-2 mr-2" Variant="Variant.Filled" Color="Color.Error" Disabled="!selectedCustomers.Any()" @onclick="DeleteSelected">Delete</MudButton>
                <MudButton Class="mt-3 ml-2 mr-2" Variant="Variant.Filled" Color="Color.Secondary" @onclick="CancelChanges">@(wasChanged ? "Cancel" : "Exit")</MudButton>
            }
        </ToolBarContent>
        <HeaderContent>
            <MudTr Style="display: flex;">
                @if (!isEditing)
                {
                    <MudTh Style="flex-basis: 56px;"></MudTh>
                }
                <MudTh Style=" flex-grow: 1; flex-basis: 150px;"><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.FirstName)">Name</MudTableSortLabel></MudTh>
                <MudTh Style=" flex-grow: 1; flex-basis: 150px;"><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.LastName)">Last name</MudTableSortLabel></MudTh>
                <MudTh Style=" flex-grow: 1; flex-basis: 250px;">Street</MudTh>
                <MudTh Style=" flex-grow: 1; flex-basis: 50px;">House #</MudTh>
                <MudTh Style=" flex-grow: 1; flex-basis: 50px;">Appartment</MudTh>
                <MudTh Style=" flex-grow: 1; flex-basis: 100px;">Postal code</MudTh>
                <MudTh Style=" flex-grow: 1; flex-basis: 150px;"><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.Town)">Town</MudTableSortLabel></MudTh>
                <MudTh Style=" flex-grow: 1; flex-basis: 150px;">Phone number</MudTh>
                <MudTh Style=" flex-grow: 1; flex-basis: 100px;"><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.BirthDate)">Date of birth</MudTableSortLabel></MudTh>
                <MudTh Style=" flex-grow: 1; flex-basis: 50px;"><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.Age)">Age</MudTableSortLabel></MudTh>
                <MudTh Style=" flex-grow: 1; flex-basis: 80px;"></MudTh>
            </MudTr>
        </HeaderContent>
        <RowTemplate>
                    
            <MudTr Style="display: flex;">
                @if (!isEditing)
                {
                    <MudTd Style="height: 70px; flex-basis:56px" DataLabel="Enabled"></MudTd>
                }
                <EditableField OnEnter="ToggleEditMode" T="string" FlexBasis="150"   Value="@context.FirstName"          ValidationAttribute="@(new PolishAlphabetAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => {context.FirstName = newValue; wasChanged = true; customersToUpdate.Add(context); })" OnValidationChanged="UpdateValidationState" />
                <EditableField OnEnter="ToggleEditMode" T="string" FlexBasis="150" Value="@context.LastName" ValidationAttribute="@(new PolishAlphabetAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => {context.LastName = newValue; wasChanged = true; customersToUpdate.Add(context); })" OnValidationChanged="UpdateValidationState" />
                <EditableField OnEnter="ToggleEditMode" T="string" FlexBasis="250" Value="@context.StreetName" ValidationAttribute="@(new PolishAlphanumericAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => {context.StreetName = newValue; wasChanged = true; customersToUpdate.Add(context); })" OnValidationChanged="UpdateValidationState" />
                <EditableField OnEnter="ToggleEditMode" T="string" FlexBasis="50" Value="@context.HouseNumber" ValidationAttribute="@(new HouseNumberAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => {context.HouseNumber = newValue; wasChanged = true; customersToUpdate.Add(context); })" OnValidationChanged="UpdateValidationState" />
                <EditableField OnEnter="ToggleEditMode" T="string" FlexBasis="50"    Value="@context.AppartmentNumber"   ValidationAttribute="@(new AppartmentNumberAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => {context.AppartmentNumber = newValue; wasChanged = true; customersToUpdate.Add(context); })" OnValidationChanged="UpdateValidationState" />
                <EditableField OnEnter="ToggleEditMode" T="string" FlexBasis="100" Value="@context.PostalCode" ValidationAttribute="@(new PostalCodeAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => {context.PostalCode = newValue; wasChanged = true; customersToUpdate.Add(context); })" OnValidationChanged="UpdateValidationState" />
                <EditableField OnEnter="ToggleEditMode" T="string" FlexBasis="150" Value="@context.Town" ValidationAttribute="@(new PolishAlphabetAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => {context.Town = newValue; wasChanged = true; customersToUpdate.Add(context); })" OnValidationChanged="UpdateValidationState" />
                <EditableField OnEnter="ToggleEditMode" T="string" FlexBasis="150" Value="@context.PhoneNumber" ValidationAttribute="@(new PhoneNumberAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => {context.PhoneNumber = newValue; wasChanged = true; customersToUpdate.Add(context); })" OnValidationChanged="UpdateValidationState" />
                <EditableField OnEnter="ToggleEditMode" T="DateTime" FlexBasis="100" Value="@context.BirthDate" IsEditing="isEditing" ValueChanged="@(newValue => { context.BirthDate = newValue; context.Age = Customer.CalculateAge(newValue); wasChanged = true; customersToUpdate.Add(context); })" OnValidationChanged="UpdateValidationState" />
                <EditableField OnEnter="ToggleEditMode" T="int" FlexBasis="50" Value="@context.Age" IsEditing="isEditing" IsDisabled="true" ValueChanged="@(newValue => {context.Age = newValue; wasChanged = true; customersToUpdate.Add(context); })" OnValidationChanged="UpdateValidationState" />
                <MudTd Style="height: 70px; padding-top: 5px; flex-grow: 1; flex-basis: 80px;" DataLabel="Enabled"> <a href="tel:+48 @context.PhoneNumber"><MudIconButton Class="@(isEditing ? "invisible" : "visible")" Icon="@TelephoneIcon"></MudIconButton> </a></MudTd>
            </MudTr>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] {  int.MaxValue, 25, 50, 100 }"
                           RowsPerPageString="Rows per page:"
                           InfoFormat="{first_item}-{last_item} of {all_items}"
                           AllItemsText="All"
                           HorizontalAlignment="HorizontalAlignment.Right" />
        </PagerContent>
    </MudTable>
    @if (isEditing)
    {
        <MudButton Class="mx-auto" Style="width: 100%" Color="Color.Primary" @onclick="OpenCreateCustomerDialog">New</MudButton>
    }
</MudPaper>

    @code {
    [Parameter] public bool _isDarkMode { get; set; }
    public bool busy;
    private bool isFormValid = true;
    private bool wasChanged = false;
    public bool isEditing { get; private set; }
    private List<Customer> customerList = new();
    private HashSet<Customer> customersToUpdate = new();
    private HashSet<Customer> selectedCustomers = new();
    private HashSet<Customer> customersToDelete = new();
    string searchString = string.Empty;
    public string TelephoneIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.Phone,
        false => Icons.Material.Outlined.Phone,
    };

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await userService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
        Link.BusyChanged += async (e) => await OnBusyChanged(e);
        Link.ErrorOccured += OnError;
        Link.DownloadNeeded += DownloadCustomerList;
        Link.RefreshNeeded += () => InvokeAsync(RefreshAsync);
        await RefreshAsync();
    }

    public async Task RefreshAsync()
    {
        busy = true;
        selectedCustomers.Clear();
        customersToUpdate.Clear();
        customersToDelete.Clear();
        customerList = (await customerManagementService.GetCustomersAsync()).ToList();
        wasChanged = false;
        busy = false;
    }

    private async Task ToggleEditMode()
    {
        if (isEditing && isFormValid)
        {
            await customerManagementService.SaveChangesAsync(customersToUpdate.ToList(), customersToDelete.Select(c => c.Id).ToList());
            isEditing = false;
            await RefreshAsync();
        }
        else
        {
            isEditing = true;
        }
        Link.TriggerEditing(isEditing);
    }

    private async Task CancelChanges()
    {
        customersToDelete.Clear();
        isEditing = false;
        Link.TriggerEditing(isEditing);
        await RefreshAsync();
    }

    private void DeleteSelected()
    {
        wasChanged = true;
        customersToDelete.UnionWith(selectedCustomers);
        customerList = customerList.Where(c => !selectedCustomers.Contains(c)).ToList();
    }

    private async Task OpenCreateCustomerDialog()
    {
        var newCustomer = await customerDialogService.OpenCreateCustomerDialogAsync();
        if (newCustomer != null)
        {
            customerList.Add(newCustomer);
            customersToUpdate.Add(newCustomer);
            wasChanged = true;
        }
    }

    private bool FilterFunc(Customer customer)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (customer.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (customer.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{customer.Town} {customer.StreetName}, {customer.HouseNumber}".Contains(searchString))
            return true;
        if (customer.PostalCode.Contains(searchString))
            return true;
        if (customer.PhoneNumber.Contains(searchString))
            return true;
        return false;
    }
    private void UpdateValidationState(bool isValid)
    {
        isFormValid = customerList.All(c => c.IsValid);
    }

    public void DownloadCustomerList()
    {
        var csvBuilder = new StringBuilder();
        csvBuilder.AppendLine("FirstName,LastName,StreetName,HouseNumber,AppartmentNumber,PostalCode,Town,PhoneNumber,BirthDate");

        foreach (var customer in customerList)
        {
            csvBuilder.AppendLine($"{customer.FirstName},{customer.LastName},{customer.StreetName},{customer.HouseNumber},{customer.AppartmentNumber},{customer.PostalCode},{customer.Town},{customer.PhoneNumber},{customer.BirthDate.ToShortDateString()}");
        }
        var csvData = csvBuilder.ToString();
        JS.InvokeVoidAsync("downloadFileFromStream", "customers.csv", csvData);
    }

    private async Task OnBusyChanged(bool b)
    {
        busy = b;
        await InvokeAsync(StateHasChanged);
    }
    public void OnError(string message)
    {
        Snackbar.Add(message, Severity.Error);
    }
}

<script>
    function downloadFileFromStream(fileName, content) {
        console.log(content);
        const file = new Blob([content], { type: 'text/csv' });
        const downloadLink = document.createElement('a');
        downloadLink.href = URL.createObjectURL(file);
        downloadLink.download = fileName;
        downloadLink.click();
        URL.revokeObjectURL(downloadLink.href);
    }
</script>