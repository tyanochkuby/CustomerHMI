@using CustomersTable.Data
@using CustomersTable.Data.Attributes
@using CustomersTable.Data.Interfaces
@using CustomersTable.Components
@inject ICustomerService service
@inject IDialogService DialogService

<PageTitle>Customers</PageTitle>
@if (busy)
{
    <div class="alert alert-info">
        Loading...
    </div>
}
else
{
    @if (customerList.Any())
    {
        <MudPaper>
            <MudTable Hover="true" T="Customer" Items="customerList" OnRowMouseEnter="OnRowMouseEnter" Filter="new Func<Customer,bool>(FilterFunc)" OnRowMouseLeave="OnRowMouseLeave">
                <ToolBarContent>
                   
                    <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    <MudSpacer />
                    <MudButton Class="mt-3 mr-2" Variant="Variant.Filled" Disabled="@(!isFormValid)" Color="Color.Primary" OnClick="ToggleEditMode">
                        @(isEditing ? "Save" : "Edit")
                    </MudButton>

                    @if (isEditing)
                    {
                        <MudButton Class="mt-3 ml-2 mr-2" Variant="Variant.Filled" Color="Color.Error" Disabled="@(!customerList.Any(c => c.Checked))" @onclick="DeleteSelected">Delete</MudButton>
                        <MudButton Class="mt-3 ml-2 mr-2" Variant="Variant.Filled" Color="Color.Secondary" @onclick="CancelChanges">Cancel</MudButton>
                    }
                </ToolBarContent>
                <HeaderContent>
                    
                    <MudTh></MudTh>
                    
                    <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.FirstName)">Name</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.LastName)">Last name</MudTableSortLabel></MudTh>
                    <MudTh>Street</MudTh>
                    <MudTh>House #</MudTh>
                    <MudTh>Appartment #</MudTh>
                    <MudTh>Postal code</MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.Town)">Town</MudTableSortLabel></MudTh>
                    <MudTh>Phone number</MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.BirthDate)">Date of birth</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.Age)">Age</MudTableSortLabel></MudTh>
                    <!-- Add more headers as needed -->
                </HeaderContent>
                <RowTemplate>
                    @{
                        bool isHovered = (currentlyHoveredElement != null && context.Id == currentlyHoveredElement.Id);
                    }

                    <MudTd Style="height: 70px;" DataLabel="Enabled"><MudCheckBox Class="@(isEditing ? "visible" : "invisible")" T="bool" @bind-Value="@context.Checked"></MudCheckBox></MudTd>

                    <EditableField T="string" Value="@context.FirstName" ValidationAttribute="@(new PolishAlphabetAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => context.FirstName = newValue)" OnValidationChanged="UpdateValidationState" />
                    <EditableField T="string" Value="@context.LastName" ValidationAttribute="@(new PolishAlphabetAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => context.LastName = newValue)" OnValidationChanged="UpdateValidationState" />
                    <EditableField T="string" Value="@context.StreetName" ValidationAttribute="@(new PolishAlphabetAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => context.StreetName = newValue)" OnValidationChanged="UpdateValidationState" />
                    <EditableField T="string" Value="@context.HouseNumber" ValidationAttribute="@(new HouseNumberAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => context.HouseNumber = newValue)" OnValidationChanged="UpdateValidationState" />
                    <EditableField T="string" Value="@context.AppartmentNumber" ValidationAttribute="@(new AppartmentNumberAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => context.AppartmentNumber = newValue)" OnValidationChanged="UpdateValidationState" />
                    <EditableField T="string" Value="@context.PostalCode" ValidationAttribute="@(new PostalCodeAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => context.PostalCode = newValue)" OnValidationChanged="UpdateValidationState" />
                    <EditableField T="string" Value="@context.Town" ValidationAttribute="@(new PolishAlphabetAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => context.Town = newValue)" OnValidationChanged="UpdateValidationState" />
                    <EditableField T="string" Value="@context.PhoneNumber" ValidationAttribute="@(new PhoneNumberAttribute())" IsEditing="isEditing" ValueChanged="@(newValue => context.PhoneNumber = newValue)" OnValidationChanged="UpdateValidationState" />
                    <EditableField T="DateTime" Value="@context.BirthDate" IsEditing="isEditing" ValueChanged="@(newValue => {
                                                                                                                                context.BirthDate = newValue;
                                                                                                                                context.Age = Customer.CalculateAge(newValue);
                                                                                                                            })" OnValidationChanged="UpdateValidationState" />
                    <EditableField T="int" Value="@context.Age" IsEditing="isEditing" IsDisabled="true" ValueChanged="@(newValue => context.Age = newValue)" OnValidationChanged="UpdateValidationState" />
                </RowTemplate>
            </MudTable>
            @if (isEditing)
            {
                <MudButton Class="mx-auto" Style="width: 100%" Color="Color.Primary" @onclick="OpenCreateCustomerDialog">New</MudButton>
            }
        </MudPaper>

    }
    else
    {
        <div class="alert alert-info">
            No customers found
        </div>
    }
}

@code {
    private bool busy;
    private bool isFormValid = true;
    private bool isEditing = false;
    private List<Customer> customerList = new List<Customer>();
    private List<Customer> newCustomers = new();
    private List<Guid> customersToDelete = new();
    private List<Customer> originalCustomerList = new List<Customer>(); // To store original data before editing
    private Customer currentlyHoveredElement;
    string searchString;

    protected override async Task OnInitializedAsync()
    {
        await RefreshAsync();
    }

    private async Task RefreshAsync()
    {
        busy = true;
        customerList = (await service.GetCustomersAsync()).ToList();
        newCustomers.Clear();
        originalCustomerList = customerList.Select(c => new Customer
            {
                Id = c.Id,
                FirstName = c.FirstName,
                LastName = c.LastName,
                StreetName = c.StreetName,
                HouseNumber = c.HouseNumber,
                AppartmentNumber = c.AppartmentNumber,
                PostalCode = c.PostalCode,
                Town = c.Town,
                PhoneNumber = c.PhoneNumber,
                BirthDate = c.BirthDate,
                Age = c.Age
            }).ToList();
        busy = false;
    }

    private async Task ToggleEditMode()
    {
        Console.WriteLine("ToggleEditMode triggered!");
        if (isEditing)
        {
            await service.DeleteCustomersAsync(customersToDelete);
            customerList = customerList.Where(c => !c.Checked).ToList();
            await service.UpdateCustomersAsync(customerList);
            await service.CreateCustomersAsync(newCustomers);
            isEditing = false;
            await RefreshAsync();
        }
        else
        {
            isEditing = true;
        }
    }

    private void CancelChanges()
    {
        customerList = originalCustomerList.Select(c => new Customer
            {
                Id = c.Id,
                FirstName = c.FirstName,
                LastName = c.LastName,
                StreetName = c.StreetName,
                HouseNumber = c.HouseNumber,
                AppartmentNumber = c.AppartmentNumber,
                PostalCode = c.PostalCode,
                Town = c.Town,
                PhoneNumber = c.PhoneNumber,
                BirthDate = c.BirthDate,
                Age = c.Age
            }).ToList();

        isEditing = false;
    }

    private void DeleteSelected()
    {
        customersToDelete.AddRange(customerList.Where(c => c.Checked).Select(c => c.Id));
        customerList = customerList.Where(c => !c.Checked).ToList();
    }

    private void OnRowMouseEnter(TableRowHoverEventArgs<Customer> eventArgs)
    {
        currentlyHoveredElement = eventArgs.Item;
    }
    private void OnRowMouseLeave(TableRowHoverEventArgs<Customer> eventArgs)
    {
        currentlyHoveredElement = null;
    }

    private async Task OpenCreateCustomerDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraLarge };

        var dialog = DialogService.Show<NewCustomerDialog>("Create New Customer", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            Customer newCustomer = (Customer)result.Data;
            newCustomers.Add(newCustomer);
            customerList.Add(newCustomer);
        }
    }

    private bool FilterFunc(Customer customer)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (customer.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (customer.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{customer.Town} {customer.StreetName}".Contains(searchString))
            return true;
        return false;
    }
    private void UpdateValidationState(bool isValid)
    {
        isFormValid = customerList.All(c => c.IsValid);
    }
}

