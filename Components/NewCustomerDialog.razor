@using CustomersTable.Data.Attributes
@using MudBlazor
@using CustomersTable.Data
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@inherits ComponentBase

<MudDialog>
    <DialogContent>

        <MudForm @ref="form" @bind-IsValid="@isValid" Class="mx-5">

            <MudTextField @bind-Value="newCustomer.FirstName" T="string" Validation="@(new PolishAlphabetAttribute())" Label="First Name" Required="true" />
            <MudTextField @bind-Value="newCustomer.LastName" T="string" Validation="@(new PolishAlphabetAttribute())" Label="Last Name" Required="true" />

            <MudTextField @ref="postalCodeField" KeyDownPreventDefault="true" OnKeyDown="HandleKeyDown" @bind-Value="newCustomer.PostalCode" T="string" Validation="@(new PostalCodeAttribute())" Label="Postal Code" Required="true" />

            <MudTextField @ref="streetTextField" @bind-Value="newCustomer.StreetName" T="string" Validation="@(new PolishAlphanumericAttribute())" Label="Street Name" Required="true" />
            <MudTextField @bind-Value="newCustomer.HouseNumber" T="string" Validation="@(new HouseNumberAttribute())" Label="House Number" Required="true" />
            <MudTextField @bind-Value="newCustomer.AppartmentNumber" T="string" Validation="@(new AppartmentNumberAttribute())" Label="Appartment Number" />
            <MudTextField @bind-Value="newCustomer.Town" T="string" Validation="@(new PolishAlphabetAttribute())" Label="Town" Required="true" />
            <MudTextField @bind-Value="newCustomer.PhoneNumber" T="string" Validation="@(new PhoneNumberAttribute())" Label="Phone Number" Required="true" />

            <MudDatePicker @bind-Date="birthDate" Mask="@(new DateMask("dd.MM.yyyy"))" Editable="true" Label="Date of Birth" Required="true" />

            <MudGrid Spacing="3" Class="mt-3 mb-2" Justify="Justify.FlexEnd">
                <MudItem>
                    <MudButton DropShadow="true" Variant="Variant.Filled" Color="Color.Secondary" OnClick="CancelDialog">Cancel</MudButton>
                </MudItem>
                <MudItem>
                    <MudButton Disabled="@(!isValid)" DropShadow="true" Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitForm">Create</MudButton>
                </MudItem>
            </MudGrid>
        </MudForm>

    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] public required MudDialogInstance MudDialog { get; set; }
    private bool isValid;
    private MudForm form = new MudForm();
    private MudTextField<string> postalCodeField = new();
    DateTime? birthDate;
    private MudTextField<string> streetTextField = new MudTextField<string>();
    bool _preventDefault;

    private Customer newCustomer = new Customer()
        {
            FirstName = string.Empty,
            LastName = string.Empty,
            StreetName = string.Empty,
            HouseNumber = string.Empty,
            AppartmentNumber = string.Empty,
            PostalCode = string.Empty,
            Town = string.Empty,
            PhoneNumber = string.Empty,
            BirthDate = DateTime.Now,
            Age=0
        };

    private void SubmitForm()
    {
        if (form.IsValid)
        {
            if (birthDate.HasValue)
            {
                newCustomer.BirthDate = birthDate.Value;
                newCustomer.Age = Customer.CalculateAge(birthDate.Value);
            }
            MudDialog.Close(DialogResult.Ok(newCustomer));
        }
    }

    private void CancelDialog()
    {
        MudDialog.Cancel();
    }

    private void OnInvalidSubmit()
    {
        form.Validate();
    }

    protected async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (Regex.IsMatch(e.Key, @"^[0-9-]$") && newCustomer.PostalCode.Length < 6)
        {
            newCustomer.PostalCode += e.Key;
            await postalCodeField.SetText(newCustomer.PostalCode);
        }
        if (e.Key == "Backspace" && newCustomer.PostalCode.Length > 0)
        {
            newCustomer.PostalCode = newCustomer.PostalCode.Substring(0, newCustomer.PostalCode.Length - 1);
            await postalCodeField.SetText(newCustomer.PostalCode);
        }
        if (e.Key == "Tab")
        {
            await Task.Delay(200);
            var postalCodeValue = postalCodeField?.Value ?? string.Empty;
            var validationContext = new ValidationContext(newCustomer)
            {
                MemberName = nameof(newCustomer.PostalCode)
            };

            var results = new List<ValidationResult>();
            bool isValid = Validator.TryValidateProperty(postalCodeValue, validationContext, results);
            if(!isValid && Regex.IsMatch(postalCodeValue, @"^[0-9]{5}$"))
            {
                postalCodeValue = postalCodeValue.Insert(2, "-");
                newCustomer.PostalCode = postalCodeValue;
                isValid = true;
            }
            if (isValid)
            {
                postalCodeField.ResetValidation();
                await newCustomer.SetAddressByPostalCode(postalCodeValue);
                await streetTextField.FocusAsync();
            }
        }
    }
}
