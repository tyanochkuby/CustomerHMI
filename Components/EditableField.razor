@using System.ComponentModel.DataAnnotations
<!-- EditableField.razor -->
@typeparam T

<MudTd @onmouseenter="OnHover" @onmouseleave="OnUnhover" Style="@TdStyle" >
    @if (IsEditing)
    {
        <MudTextField OnKeyDown="OnKeyDown" @ref="textField" @onfocus="OnTextFieldFocused" @onfocusout="OnTextFieldUnfocused" @bind-Value="Value" T="T" Format="@(typeof(T) == typeof(DateTime) ? "dd.MM.yyyy" : "")" Disabled="@IsDisabled" @bind-Value:event="oninput" Validation="@ValidationAttribute" ValueChanged="EventCallback.Factory.Create<T>(this, OnValueChanged)" Immediate="true" @onblur="ValidateField" />
    }
    else
    {
        @if (Value is DateTime d)
        {
            <MudText Class="pointer-events-none">@d.ToShortDateString()</MudText>
        }
        else
        {
            <MudText Class="pointer-events-none">@Value</MudText>
        }
    }
</MudTd>

    @code {



    [Parameter] public bool IsEditing { get; set; }
    [Parameter] public T? Value { get; set; }
    [Parameter] public EventCallback<T> ValueChanged { get; set; }
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public ValidationAttribute? ValidationAttribute { get; set; }
    [Parameter] public EventCallback<bool> OnValidationChanged { get; set; }
    [Parameter] public int FlexBasis { get; set; } = 150;
    [Parameter] public EventCallback OnEnter { get; set; }

    private MudTextField<T> textField = new MudTextField<T>();
    private bool isValid = true;
    private bool isHovered;
    private bool textFieldFocused { get; set; }

    private string TdStyle
    {
        get => $"height: 70px; flex-grow: {((isHovered || textFieldFocused) && IsEditing && !IsDisabled ? "2" : "1")}; flex-basis: {FlexBasis}px; transition: flex-grow 0.3s ease-in-out;";
    }

    private async Task OnValueChanged(T newValue)
    {
        Value = newValue;
        await ValueChanged.InvokeAsync(newValue);
        await ValidateField();
    }

    private async Task ValidateField()
    {
        var context = new ValidationContext(Value);
        var results = new List<ValidationResult>();
        isValid = ValidationAttribute != null ? Validator.TryValidateValue(Value, context, results, new[] { ValidationAttribute }) : true;
        await OnValidationChanged.InvokeAsync(isValid);
    }
    private void OnHover(MouseEventArgs e) => isHovered = true;
    private void OnUnhover(MouseEventArgs e) => isHovered = false;
    private void OnTextFieldFocused(FocusEventArgs e) => textFieldFocused = true;
    private void OnTextFieldUnfocused(FocusEventArgs e) => textFieldFocused = false;


    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if(e.Key == "Enter")
        {
            var context = new ValidationContext(Value);
            var results = new List<ValidationResult>();
            isValid = Validator.TryValidateValue(Value, context, results, new[] { ValidationAttribute });

            if(isValid)
            {
                await textField.BlurAsync();
                await OnEnter.InvokeAsync();
            }
        }
    }
}
